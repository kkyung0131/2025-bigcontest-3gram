.fns = ~ factor(as.integer(factor(., levels = common_levels)), levels = 1:6)
))
na_dlv_stores <- data2 %>%
group_by(id) %>%
summarise(all_na = all(is.na(dlv_cat))) %>%
filter(all_na) %>%
pull(id)
data2 <-
data2 %>%
mutate(dlv_cat = ifelse(dlv_cat < 0, NA, dlv_cat)) %>%
# Replace -999999.9 to NA
mutate(dlv_cat = ifelse(dlv_cat < 0, NA, dlv_cat)) %>%
# Limit values to 100
mutate(dlv_cat = ifelse(dlv_cat > 100, 100, dlv_cat)) %>%
# Add labeling column (having dlv_cat:1, other:0)
mutate(has_dlv_cat = if_else(id %in% na_dlv_stores, 0, 1)) %>%
mutate(ind_sales_amt_rat = ifelse(ind_sales_amt_rat < 0, 0, ind_sales_amt_rat)) %>%
select(-cancel_cat, -dlv_cat, -mkt_rank_rat, -mkt_cancel_rat)
return(data2)
}
d2 <- processed_data2(data2)
dim(d2)
str(data3)
dim(data3)
d3 <- processed_data3(data3)
processed_data3 <- function(data3) {
data3 <-
data3 %>%
rename(
id = ENCODED_MCT,
ym = TA_YM,
m_20_under_rat = M12_MAL_1020_RAT,
m_30_rat = M12_MAL_30_RAT,
m_40_rat = M12_MAL_40_RAT,
m_50_rat = M12_MAL_50_RAT,
m_60_over_rat = M12_MAL_60_RAT,
f_20_under_rat = M12_FME_1020_RAT,
f_30_rat = M12_FME_30_RAT ,
f_40_rat = M12_FME_40_RAT,
f_50_rat = M12_FME_50_RAT,
f_60_over_rat = M12_FME_60_RAT,
re_cust_rat = MCT_UE_CLN_REU_RAT,
new_cust_rat = MCT_UE_CLN_NEW_RAT,
resid_cust_rat = RC_M1_SHC_RSD_UE_CLN_RAT,
office_cust_rat = RC_M1_SHC_WP_UE_CLN_RAT,
move_cust_rat = RC_M1_SHC_FLP_UE_CLN_RAT
) %>%
filter(!(id %in% c("43C7FF8A46", "15E95AF364"))) %>%
mutate(ym = as.Date(ym, format = "%Y%m%d")) %>%
mutate(
age_20_under_rat = m_20_under_rat + f_20_under_rat,
age_30_rat = m_30_rat + f_30_rat,
age_40_rat = m_40_rat + f_40_rat,
age_50_rat = m_50_rat + f_50_rat,
age_60_over_rat = m_60_over_rat + f_60_over_rat,
m_rat = m_20_under_rat + m_30_rat + m_40_rat + m_50_rat + m_60_over_rat,
f_rat = f_20_under_rat + f_30_rat + f_40_rat + f_50_rat + f_60_over_rat
)
return(data3)
}
d3 <- processed_data3(data3)
dim(d3)
dim(data1)
dim(data1p)
dim(d2)
# 데이터셋 머지
merged_data <- function(data1, data2, data3) {
merged_1 <- left_join(data2, data3, by = c("id", "ym"))
merged_2 <- left_join(merged_1, data1, by = "id")
return(merged_2)
}
merged_data(data1p, d2, d3)
full <- merged_data(data1p, d2, d3)
dim(full)
data1 <- read.csv("./data/raw/big_data_set1_f.csv", fileEncoding = "cp949")
data2 <- read.csv("./data/raw/big_data_set2_f.csv", fileEncoding = "cp949")
data3 <- read.csv("./data/raw/big_data_set3_f.csv", fileEncoding = "cp949")
# 데이터셋 전처리
processed_data1 <- function(data1) {
new_names <- c(
"id", "address", "name", "is_brand", "sigungu", "ind", "mkt", "open_date", "close_date"
)
coords_df <- read.csv("./data/coords_df.csv")
data1 <-
data1 %>%
rename_with(~ new_names) %>%
filter(!(id %in% c("43C7FF8A46", "15E95AF364"))) %>%
mutate(is_brand = ifelse(is_brand == "", 1, 0)) %>%
mutate(is_closed = ifelse(is.na(close_date), 0, 1)) %>%
mutate(
big_ind = case_when(
ind %in% c("백반/가정식", "한식-찌개/전골", "한식-냉면", "한식-해물/생선", "한식-단품요리일반", "한식-국수/만두", "한식-육류/고기", "한식-국밥/설렁탕", "한식뷔페", "한정식", "한식-감자탕", "구내식당/푸드코트", "한식-죽", "한식-두부요리", "기사식당", "반찬", "도시락") ~ "한식음식점",
ind %in% c("중식-딤섬/중식만두", "중식당", "중식-훠궈/마라탕") ~ "중식음식점",
ind %in% c("일식당", "이자카야", "일식-우동/소바/라면", "일식-덮밥/돈가스", "일식-샤브샤브", "일식-초밥/롤", "일식-참치회") ~ "일식음식점",
ind %in% c("양식", "동남아/인도음식", "기타세계요리", "스테이크") ~ "양식음식점",
ind %in% c("베이커리", "떡/한과 제조", "마카롱", "도너츠", "떡/한과", "와플/크로플") ~ "제과점",
ind %in% c("햄버거", "샌드위치/토스트", "피자") ~ "패스트푸드점",
ind %in% c("치킨") ~ "치킨전문점",
ind %in% c("분식", "탕후루") ~ "분식전문점",
ind %in% c("요리주점", "룸살롱/단란주점", "일반 유흥주점", "포장마차", "호프/맥주", "주류", "꼬치구이", "와인바", "와인샵", "민속주점") ~ "호프-간이주점",
ind %in% c("커피전문점", "카페", "아이스크림/빙수", "차", "주스", "테마카페", "테이크아웃커피") ~ "커피-음료",
ind %in% c("청과물") ~ "청과상",
ind %in% c("식료품", "농산물","유제품", "담배") ~ "슈퍼마켓",
ind %in% c("미곡상") ~ "미곡판매",
ind %in% c("축산물") ~ "육류판매",
ind %in% c("수산물","건어물") ~ "수산물판매",
ind %in% c("식품 제조","건강식품", "인삼제품","건강원") ~ "반찬가게",
TRUE ~ "담배"
)
) %>%
bind_cols(dong = coords_df$dong) %>%
select(-name, -address, -sigungu, -mkt, -open_date, -close_date, -ind)
return(data1)
}
processed_data2 <- function(data2) {
common_levels <- c("1_10%이하", "2_10-25%","3_25-50%", "4_50-75%", "5_75-90%", "6_90%초과(하위 10% 이하)")
data2 <-
data2 %>%
rename(
id = ENCODED_MCT,
ym = TA_YM,
duration_cat = MCT_OPE_MS_CN,
sales_amt_cat = RC_M1_SAA,
sales_cnt_cat = RC_M1_TO_UE_CT,
unique_cust_cat = RC_M1_UE_CUS_CN,
aov_cat = RC_M1_AV_NP_AT,
cancel_cat = APV_CE_RAT,
dlv_cat = DLV_SAA_RAT,
ind_sales_amt_rat = M1_SME_RY_SAA_RAT,
ind_sales_cnt_rat = M1_SME_RY_CNT_RAT,
ind_rank_rat = M12_SME_RY_SAA_PCE_RT,
mkt_rank_rat = M12_SME_BZN_SAA_PCE_RT,
ind_cancel_rat = M12_SME_RY_ME_MCT_RAT,
mkt_cancel_rat = M12_SME_BZN_ME_MCT_RAT
) %>%
filter(!(id %in% c("43C7FF8A46", "15E95AF364"))) %>%
mutate(ym = as.Date(ym, format = "%Y%m%d")) %>%
# Encode variable as a factor
mutate(across(
.cols = c(duration_cat, sales_amt_cat, sales_cnt_cat, unique_cust_cat, aov_cat),
.fns = ~ factor(as.integer(factor(., levels = common_levels)), levels = 1:6)
))
na_dlv_stores <- data2 %>%
group_by(id) %>%
summarise(all_na = all(is.na(dlv_cat))) %>%
filter(all_na) %>%
pull(id)
data2 <-
data2 %>%
mutate(dlv_cat = ifelse(dlv_cat < 0, NA, dlv_cat)) %>%
# Replace -999999.9 to NA
mutate(dlv_cat = ifelse(dlv_cat < 0, NA, dlv_cat)) %>%
# Limit values to 100
mutate(dlv_cat = ifelse(dlv_cat > 100, 100, dlv_cat)) %>%
# Add labeling column (having dlv_cat:1, other:0)
mutate(has_dlv_cat = if_else(id %in% na_dlv_stores, 0, 1)) %>%
mutate(ind_sales_amt_rat = ifelse(ind_sales_amt_rat < 0, 0, ind_sales_amt_rat)) %>%
select(-cancel_cat, -dlv_cat, -mkt_rank_rat, -mkt_cancel_rat)
return(data2)
}
processed_data3 <- function(data3) {
data3 <-
data3 %>%
rename(
id = ENCODED_MCT,
ym = TA_YM,
m_20_under_rat = M12_MAL_1020_RAT,
m_30_rat = M12_MAL_30_RAT,
m_40_rat = M12_MAL_40_RAT,
m_50_rat = M12_MAL_50_RAT,
m_60_over_rat = M12_MAL_60_RAT,
f_20_under_rat = M12_FME_1020_RAT,
f_30_rat = M12_FME_30_RAT ,
f_40_rat = M12_FME_40_RAT,
f_50_rat = M12_FME_50_RAT,
f_60_over_rat = M12_FME_60_RAT,
re_cust_rat = MCT_UE_CLN_REU_RAT,
new_cust_rat = MCT_UE_CLN_NEW_RAT,
resid_cust_rat = RC_M1_SHC_RSD_UE_CLN_RAT,
office_cust_rat = RC_M1_SHC_WP_UE_CLN_RAT,
move_cust_rat = RC_M1_SHC_FLP_UE_CLN_RAT
) %>%
filter(!(id %in% c("43C7FF8A46", "15E95AF364"))) %>%
mutate(ym = as.Date(ym, format = "%Y%m%d")) %>%
mutate(
age_20_under_rat = m_20_under_rat + f_20_under_rat,
age_30_rat = m_30_rat + f_30_rat,
age_40_rat = m_40_rat + f_40_rat,
age_50_rat = m_50_rat + f_50_rat,
age_60_over_rat = m_60_over_rat + f_60_over_rat,
m_rat = m_20_under_rat + m_30_rat + m_40_rat + m_50_rat + m_60_over_rat,
f_rat = f_20_under_rat + f_30_rat + f_40_rat + f_50_rat + f_60_over_rat
)
return(data3)
}
# 데이터셋 머지
merged_data <- function(data1, data2, data3) {
merged_1 <- left_join(data2, data3, by = c("id", "ym"))
merged_2 <- left_join(merged_1, data1, by = "id")
return(merged_2)
}
df1 <- processed_data1(data1)
df2 <- processed_data2(data2)
df3 <- processed_data3(data3)
dfa <- left_join(df2, df3, by = c("id", "ym"))
dim(df2)
# df3에서 중복 확인
df3 %>%
count(id, ym) %>%
filter(n > 1)
dim(df3)
dim(df2)
setdiff(df1$id, df2$id)
setdiff(df2$id, df1$id)
dfa <- left_join(df2, df3, by = c("id", "ym"))
df2_dup <- df2 %>%
count(id, ym) %>%
filter(n > 1)
df3_dup <- df3 %>%
count(id, ym) %>%
filter(n > 1)
nrow(df2_dup)
nrow(df3_dup)
dfa <- left_join(df2, df3, by = c("id", "ym"))
dim(dfa)
str(df1)
str(df2)
str(df2)
df2$ym[1,]
df2$ym[1]
df2$ym[2]
processed_data2 <- function(data2) {
common_levels <- c("1_10%이하", "2_10-25%","3_25-50%", "4_50-75%", "5_75-90%", "6_90%초과(하위 10% 이하)")
data2 <-
data2 %>%
rename(
id = ENCODED_MCT,
ym = TA_YM,
duration_cat = MCT_OPE_MS_CN,
sales_amt_cat = RC_M1_SAA,
sales_cnt_cat = RC_M1_TO_UE_CT,
unique_cust_cat = RC_M1_UE_CUS_CN,
aov_cat = RC_M1_AV_NP_AT,
cancel_cat = APV_CE_RAT,
dlv_cat = DLV_SAA_RAT,
ind_sales_amt_rat = M1_SME_RY_SAA_RAT,
ind_sales_cnt_rat = M1_SME_RY_CNT_RAT,
ind_rank_rat = M12_SME_RY_SAA_PCE_RT,
mkt_rank_rat = M12_SME_BZN_SAA_PCE_RT,
ind_cancel_rat = M12_SME_RY_ME_MCT_RAT,
mkt_cancel_rat = M12_SME_BZN_ME_MCT_RAT
) %>%
filter(!(id %in% c("43C7FF8A46", "15E95AF364"))) %>%
mutate(ym = as.Date(paste0(data2$ym, "01"), format = "%Y%m%d")) %>%
# Encode variable as a factor
mutate(across(
.cols = c(duration_cat, sales_amt_cat, sales_cnt_cat, unique_cust_cat, aov_cat),
.fns = ~ factor(as.integer(factor(., levels = common_levels)), levels = 1:6)
))
na_dlv_stores <- data2 %>%
group_by(id) %>%
summarise(all_na = all(is.na(dlv_cat))) %>%
filter(all_na) %>%
pull(id)
data2 <-
data2 %>%
mutate(dlv_cat = ifelse(dlv_cat < 0, NA, dlv_cat)) %>%
# Replace -999999.9 to NA
mutate(dlv_cat = ifelse(dlv_cat < 0, NA, dlv_cat)) %>%
# Limit values to 100
mutate(dlv_cat = ifelse(dlv_cat > 100, 100, dlv_cat)) %>%
# Add labeling column (having dlv_cat:1, other:0)
mutate(has_dlv_cat = if_else(id %in% na_dlv_stores, 0, 1)) %>%
mutate(ind_sales_amt_rat = ifelse(ind_sales_amt_rat < 0, 0, ind_sales_amt_rat)) %>%
select(-cancel_cat, -dlv_cat, -mkt_rank_rat, -mkt_cancel_rat)
return(data2)
}
processed_data3 <- function(data3) {
data3 <-
data3 %>%
rename(
id = ENCODED_MCT,
ym = TA_YM,
m_20_under_rat = M12_MAL_1020_RAT,
m_30_rat = M12_MAL_30_RAT,
m_40_rat = M12_MAL_40_RAT,
m_50_rat = M12_MAL_50_RAT,
m_60_over_rat = M12_MAL_60_RAT,
f_20_under_rat = M12_FME_1020_RAT,
f_30_rat = M12_FME_30_RAT ,
f_40_rat = M12_FME_40_RAT,
f_50_rat = M12_FME_50_RAT,
f_60_over_rat = M12_FME_60_RAT,
re_cust_rat = MCT_UE_CLN_REU_RAT,
new_cust_rat = MCT_UE_CLN_NEW_RAT,
resid_cust_rat = RC_M1_SHC_RSD_UE_CLN_RAT,
office_cust_rat = RC_M1_SHC_WP_UE_CLN_RAT,
move_cust_rat = RC_M1_SHC_FLP_UE_CLN_RAT
) %>%
filter(!(id %in% c("43C7FF8A46", "15E95AF364"))) %>%
mutate(ym = as.Date(paste0(data3$ym, "01"), format = "%Y%m%d")) %>%
mutate(
age_20_under_rat = m_20_under_rat + f_20_under_rat,
age_30_rat = m_30_rat + f_30_rat,
age_40_rat = m_40_rat + f_40_rat,
age_50_rat = m_50_rat + f_50_rat,
age_60_over_rat = m_60_over_rat + f_60_over_rat,
m_rat = m_20_under_rat + m_30_rat + m_40_rat + m_50_rat + m_60_over_rat,
f_rat = f_20_under_rat + f_30_rat + f_40_rat + f_50_rat + f_60_over_rat
)
return(data3)
}
# 데이터셋 머지
merged_data <- function(data1, data2, data3) {
merged_1 <- left_join(data2, data3, by = c("id", "ym"))
merged_2 <- left_join(merged_1, data1, by = "id")
return(merged_2)
}
df1 <- processed_data1(data1)
df2 <- processed_data2(data2)
df3 <- processed_data3(data3)
dfa <- left_join(df2, df3, by = c("id", "ym"))
df2$ym
str(data2$TA_YM)
processed_data2 <- function(data2) {
common_levels <- c("1_10%이하", "2_10-25%","3_25-50%", "4_50-75%", "5_75-90%", "6_90%초과(하위 10% 이하)")
data2 <-
data2 %>%
rename(
id = ENCODED_MCT,
ym = TA_YM,
duration_cat = MCT_OPE_MS_CN,
sales_amt_cat = RC_M1_SAA,
sales_cnt_cat = RC_M1_TO_UE_CT,
unique_cust_cat = RC_M1_UE_CUS_CN,
aov_cat = RC_M1_AV_NP_AT,
cancel_cat = APV_CE_RAT,
dlv_cat = DLV_SAA_RAT,
ind_sales_amt_rat = M1_SME_RY_SAA_RAT,
ind_sales_cnt_rat = M1_SME_RY_CNT_RAT,
ind_rank_rat = M12_SME_RY_SAA_PCE_RT,
mkt_rank_rat = M12_SME_BZN_SAA_PCE_RT,
ind_cancel_rat = M12_SME_RY_ME_MCT_RAT,
mkt_cancel_rat = M12_SME_BZN_ME_MCT_RAT
) %>%
filter(!(id %in% c("43C7FF8A46", "15E95AF364"))) %>%
mutate(ym = ymd(paste0(ym, "01"))) %>%
# Encode variable as a factor
mutate(across(
.cols = c(duration_cat, sales_amt_cat, sales_cnt_cat, unique_cust_cat, aov_cat),
.fns = ~ factor(as.integer(factor(., levels = common_levels)), levels = 1:6)
))
na_dlv_stores <- data2 %>%
group_by(id) %>%
summarise(all_na = all(is.na(dlv_cat))) %>%
filter(all_na) %>%
pull(id)
data2 <-
data2 %>%
mutate(dlv_cat = ifelse(dlv_cat < 0, NA, dlv_cat)) %>%
# Replace -999999.9 to NA
mutate(dlv_cat = ifelse(dlv_cat < 0, NA, dlv_cat)) %>%
# Limit values to 100
mutate(dlv_cat = ifelse(dlv_cat > 100, 100, dlv_cat)) %>%
# Add labeling column (having dlv_cat:1, other:0)
mutate(has_dlv_cat = if_else(id %in% na_dlv_stores, 0, 1)) %>%
mutate(ind_sales_amt_rat = ifelse(ind_sales_amt_rat < 0, 0, ind_sales_amt_rat)) %>%
select(-cancel_cat, -dlv_cat, -mkt_rank_rat, -mkt_cancel_rat)
return(data2)
}
processed_data3 <- function(data3) {
data3 <-
data3 %>%
rename(
id = ENCODED_MCT,
ym = TA_YM,
m_20_under_rat = M12_MAL_1020_RAT,
m_30_rat = M12_MAL_30_RAT,
m_40_rat = M12_MAL_40_RAT,
m_50_rat = M12_MAL_50_RAT,
m_60_over_rat = M12_MAL_60_RAT,
f_20_under_rat = M12_FME_1020_RAT,
f_30_rat = M12_FME_30_RAT ,
f_40_rat = M12_FME_40_RAT,
f_50_rat = M12_FME_50_RAT,
f_60_over_rat = M12_FME_60_RAT,
re_cust_rat = MCT_UE_CLN_REU_RAT,
new_cust_rat = MCT_UE_CLN_NEW_RAT,
resid_cust_rat = RC_M1_SHC_RSD_UE_CLN_RAT,
office_cust_rat = RC_M1_SHC_WP_UE_CLN_RAT,
move_cust_rat = RC_M1_SHC_FLP_UE_CLN_RAT
) %>%
filter(!(id %in% c("43C7FF8A46", "15E95AF364"))) %>%
mutate(ym = ymd(paste0(ym, "01"))) %>%
mutate(
age_20_under_rat = m_20_under_rat + f_20_under_rat,
age_30_rat = m_30_rat + f_30_rat,
age_40_rat = m_40_rat + f_40_rat,
age_50_rat = m_50_rat + f_50_rat,
age_60_over_rat = m_60_over_rat + f_60_over_rat,
m_rat = m_20_under_rat + m_30_rat + m_40_rat + m_50_rat + m_60_over_rat,
f_rat = f_20_under_rat + f_30_rat + f_40_rat + f_50_rat + f_60_over_rat
)
return(data3)
}
# 데이터셋 머지
merged_data <- function(data1, data2, data3) {
merged_1 <- left_join(data2, data3, by = c("id", "ym"))
merged_2 <- left_join(merged_1, data1, by = "id")
return(merged_2)
}
df1 <- processed_data1(data1)
df2 <- processed_data2(data2)
df3 <- processed_data3(data3)
df2$ym[1]
dfa <- left_join(df2, df3, by = c("id", "ym"))
dim(dfa)
full <- merged_data(df1, df2, df3)
dim(full)
View(full)
dim(all)
dim(is_closed)
train <- read.csv("./bigcon_train_id.csv")
test <- read.csv("./bigcon_test_id.csv")
dim(train_df); dim(test_df)
train_df <- read.csv("./train_for_cust_pattern.csv")
train_df <- read.csv("./train_for_cust_pattern_4class.csv")
dim(train_df); dim(test_df)
dim(all)
read.csv("./bigcon_train_id.csv")
aa <- read.csv("C:/Users/lgpc/Desktop/2025 빅콘테스트/bigcon_train_id.csv")
dim(aa)
data <- c(
0.351, 0.359, 0.369, 0.398, 0.400, 0.436, 0.450, 0.452, 0.484, 0.510,
0.523, 0.527, 0.530, 0.540, 0.553, 0.558, 0.564, 0.567, 0.571, 0.578,
0.581, 0.582, 0.583, 0.584, 0.585, 0.642, 0.667, 0.667, 0.668, 0.672,
0.675, 0.686, 0.705, 0.708, 0.709, 0.710, 0.712, 0.728, 0.735, 0.741,
0.741, 0.741, 0.746, 0.749, 0.753, 0.757, 0.767, 0.779, 0.783, 0.786,
0.788, 0.799, 0.872, 0.883, 0.888, 0.892, 0.909, 0.919, 0.921, 0.927,
0.927, 0.928, 0.944, 0.957, 0.960, 0.975, 0.975, 0.978, 0.985, 0.992,
1.000, 1.001, 1.002, 1.026, 1.048, 1.065, 1.086, 1.090, 1.095, 1.099,
1.101, 1.102, 1.121, 1.124, 1.125, 1.135, 1.139, 1.141, 1.141, 1.145,
1.154, 1.166, 1.260, 1.274, 1.287, 1.307, 1.316, 1.325, 1.330, 1.334,
1.351, 1.380, 1.392, 1.415, 1.416, 1.418, 1.447, 1.456, 1.492, 1.497,
1.573, 1.582, 1.590, 1.602, 1.608, 1.620, 1.655, 1.688, 1.698, 1.698,
1.701, 1.761, 1.782, 1.836, 1.868, 1.882, 1.884, 1.921, 1.971, 1.985,
1.989, 2.066, 2.093, 2.094, 2.144, 2.155, 2.157, 2.165, 2.170, 2.213,
2.265, 2.287, 2.321, 2.413, 2.561, 2.736, 2.867, 2.968, 3.149, 3.521
)
# 0.5 단위로 자르기
breaks <- seq(0, 4, by = 0.5)
data_cut <- table(cut(data, breaks = breaks, right = FALSE))
# Empirical Failure Rate 계산하기
z <- rep(0, length(data_cut))
mi <- sum(data_cut)
for(i in 1:length(data_cut)) {
z[i] <- data_cut[i] / mi
mi <- mi - sum(data_cut[i])
}
print(z)
# 분포 확인하기
plot(z, lwd = 2, type = "b")
#' Aggregate data by quarter
#'
#' @description
#'   Summarizes the data at the quarterly level.
#'   Computes mean and standard deviation for numeric columns.
#'   Optional median aggregation for sales_amt_cat.
#'
#' @param df_quarter Input dataframe with quarterly information
#' @param median Whether to compute median for sales_amt_cat (default: FALSE)
#' @return Quarterly aggregated dataframe
summarize_quarter <- function(df_quarter, median = FALSE) {
if (!median) {
exclude_cols <- c("has_dlv_cat", "is_brand", "big_ind", "dong",
"id", "ym", "year", "month", "quarter", "ym_quarter")
cols <- df_quarter %>%
select(-all_of(exclude_cols)) %>%
names()
df_quarter_summary <- df_quarter %>%
group_by(id, ym_quarter, has_dlv_cat, is_brand, big_ind, dong) %>%
summarise(
across(all_of(cols),
list(
mean = ~if (length(.) > 0) mean(., na.rm = TRUE) else NA_real_,
std  = ~if (length(.) == 0) NA_real_ else if (length(.) == 1) 0 else sd(., na.rm = TRUE)
),
.names = "{.col}_{.fn}"),
.groups = "drop"
) %>%
mutate(ym_quarter = as.integer(ym_quarter))
} else {
exclude_cols <- c("has_dlv_cat", "is_brand", "big_ind", "dong",
"id", "ym", "year", "month", "quarter", "ym_quarter", "sales_amt_cat")
cols <- df_quarter %>%
select(-all_of(exclude_cols)) %>%
names()
df_quarter_summary <- df_quarter %>%
group_by(id, ym_quarter, has_dlv_cat, is_brand, big_ind, dong) %>%
summarise(
across(all_of(cols),
list(
mean = ~if (length(.) > 0) mean(., na.rm = TRUE) else NA_real_,
std  = ~if (length(.) > 1) sd(., na.rm = TRUE) else NA_real_
),
.names = "{.col}_{.fn}"),
sales_amt_cat_median = median(sales_amt_cat, na.rm = TRUE),
.groups = "drop"
)
}
return(df_quarter_summary)
}
